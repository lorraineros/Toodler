{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport data from \"../../resources/data.json\";\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport styles from \"./styles\";\nimport BoardList from \"../../components/BoardList\";\nimport Toolbar from \"../../components/ToolBar\";\nimport AddBoardModal from \"../../components/AddBoardModal\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Main = function Main(_ref) {\n  var navigate = _ref.navigation.navigate;\n  var addBoard = function addBoard(name, description, thumbnailPhoto) {\n    var id = Math.max.apply(Math, _toConsumableArray(boards.map(function (b) {\n      return b.id;\n    }))) + 1;\n    var updatedBoards = [].concat(_toConsumableArray(boards), [{\n      id: id,\n      name: name,\n      description: description,\n      thumbnailPhoto: thumbnailPhoto\n    }]);\n    console.log(updatedBoards);\n    setBoards(updatedBoards);\n  };\n  var deleteBoard = function deleteBoard(boardId) {\n    var updatedBoards = boards.filter(function (board) {\n      return board.id !== boardId;\n    });\n    setBoards(updatedBoards);\n  };\n  var selectBoard = function selectBoard(name) {\n    var board = data.boards.find(function (b) {\n      return b.name === name;\n    });\n    setSelectedBoard(board);\n    setBoardName(name);\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(BoardList, {\n      navigate: navigate,\n      boards: boards,\n      deleteBoard: deleteBoard,\n      selectBoard: selectBoard,\n      boardName: boardName\n    })\n  });\n};\nMain.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default Main;","map":{"version":3,"names":["data","PropTypes","React","useEffect","useState","View","styles","BoardList","Toolbar","AddBoardModal","jsx","_jsx","Main","_ref","navigate","navigation","addBoard","name","description","thumbnailPhoto","id","Math","max","apply","_toConsumableArray","boards","map","b","updatedBoards","concat","console","log","setBoards","deleteBoard","boardId","filter","board","selectBoard","find","setSelectedBoard","setBoardName","style","container","children","boardName","propTypes","shape","func","isRequired"],"sources":["C:/Users/lorra/Documents/GitHub/Toodler/src/views/MainView/index.js"],"sourcesContent":["import data from '../../resources/data.json'\r\nimport PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { View } from 'react-native'\r\nimport styles from './styles'\r\nimport BoardList from '../../components/BoardList'\r\nimport Toolbar from '../../components/ToolBar'\r\nimport AddBoardModal from '../../components/AddBoardModal'\r\n\r\nconst Main = ({ navigation: { navigate } }) => {\r\n\r\n  const addBoard = (name, description, thumbnailPhoto) => {\r\n    const id = Math.max(...boards.map(b => b.id)) + 1\r\n    const updatedBoards = [...boards, {\r\n      id,\r\n      name,\r\n      description,\r\n      thumbnailPhoto\r\n    }]\r\n    console.log(updatedBoards)\r\n    setBoards(updatedBoards)\r\n  }\r\n\r\n  const deleteBoard = (boardId) => {\r\n    // Delete board logic\r\n    const updatedBoards = boards.filter((board) => board.id !== boardId)\r\n    setBoards(updatedBoards)\r\n  }\r\n\r\n  const selectBoard = name => {\r\n    const board = data.boards.find(b => b.name === name)\r\n    setSelectedBoard(board)\r\n    setBoardName(name)\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <BoardList navigate={navigate} boards={boards} deleteBoard={deleteBoard} selectBoard={selectBoard} boardName={boardName}/>\r\n    </View>\r\n  )\r\n}\r\n\r\nMain.propTypes = {\r\n  navigation: PropTypes.shape({\r\n    navigate: PropTypes.func.isRequired\r\n  }).isRequired\r\n}\r\n\r\nexport default Main\r\n"],"mappings":";AAAA,OAAOA,IAAI;AACX,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,OAAAC,IAAA;AAElD,OAAOC,MAAM;AACb,OAAOC,SAAS;AAChB,OAAOC,OAAO;AACd,OAAOC,aAAa;AAAsC,SAAAC,GAAA,IAAAC,IAAA;AAE1D,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAAC,IAAA,EAAqC;EAAA,IAAjBC,QAAQ,GAAAD,IAAA,CAAtBE,UAAU,CAAID,QAAQ;EAEpC,IAAME,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,IAAI,EAAEC,WAAW,EAAEC,cAAc,EAAK;IACtD,IAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAAC,KAAA,CAARF,IAAI,EAAAG,kBAAA,CAAQC,MAAM,CAACC,GAAG,CAAC,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACP,EAAE;IAAA,EAAC,EAAC,GAAG,CAAC;IACjD,IAAMQ,aAAa,MAAAC,MAAA,CAAAL,kBAAA,CAAOC,MAAM,IAAE;MAChCL,EAAE,EAAFA,EAAE;MACFH,IAAI,EAAJA,IAAI;MACJC,WAAW,EAAXA,WAAW;MACXC,cAAc,EAAdA;IACF,CAAC,EAAC;IACFW,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;IAC1BI,SAAS,CAACJ,aAAa,CAAC;EAC1B,CAAC;EAED,IAAMK,WAAW,GAAG,SAAdA,WAAWA,CAAIC,OAAO,EAAK;IAE/B,IAAMN,aAAa,GAAGH,MAAM,CAACU,MAAM,CAAC,UAACC,KAAK;MAAA,OAAKA,KAAK,CAAChB,EAAE,KAAKc,OAAO;IAAA,EAAC;IACpEF,SAAS,CAACJ,aAAa,CAAC;EAC1B,CAAC;EAED,IAAMS,WAAW,GAAG,SAAdA,WAAWA,CAAGpB,IAAI,EAAI;IAC1B,IAAMmB,KAAK,GAAGpC,IAAI,CAACyB,MAAM,CAACa,IAAI,CAAC,UAAAX,CAAC;MAAA,OAAIA,CAAC,CAACV,IAAI,KAAKA,IAAI;IAAA,EAAC;IACpDsB,gBAAgB,CAACH,KAAK,CAAC;IACvBI,YAAY,CAACvB,IAAI,CAAC;EACpB,CAAC;EAED,OACEN,IAAA,CAACN,IAAI;IAACoC,KAAK,EAAEnC,MAAM,CAACoC,SAAU;IAAAC,QAAA,EAC5BhC,IAAA,CAACJ,SAAS;MAACO,QAAQ,EAAEA,QAAS;MAACW,MAAM,EAAEA,MAAO;MAACQ,WAAW,EAAEA,WAAY;MAACI,WAAW,EAAEA,WAAY;MAACO,SAAS,EAAEA;IAAU,CAAC;EAAC,CACtH,CAAC;AAEX,CAAC;AAEDhC,IAAI,CAACiC,SAAS,GAAG;EACf9B,UAAU,EAAEd,SAAS,CAAC6C,KAAK,CAAC;IAC1BhC,QAAQ,EAAEb,SAAS,CAAC8C,IAAI,CAACC;EAC3B,CAAC,CAAC,CAACA;AACL,CAAC;AAED,eAAepC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}